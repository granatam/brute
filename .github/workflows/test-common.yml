on:
  workflow_call:
    inputs:
      runs_on: { type: string, required: true }
      cc_prefix: { type: string, required: false, default: '' }
      valgrind_prefix: { type: string, required: false, default: '' }

jobs:
  test:
    name: test
    runs-on: ${{ inputs.runs_on }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: update ubuntu packages
        if: ${{ contains(inputs.runs_on, 'ubuntu') }}
        run: sudo apt-get update -y
      - name: install valgrind and netcat
        if: ${{ contains(inputs.runs_on, 'ubuntu') }}
        run: sudo apt-get install libevent-dev valgrind netcat-traditional -y
      - name: set max_examples config for MacOS tests
        if: ${{ contains(inputs.runs_on, 'macos') }}
        run: |
          echo "HYPOTHESIS_MAX_EXAMPLES=50" >> $GITHUB_ENV
      - name: install python dependencies 
        run: pip install pytest hypothesis
      - name: build (dev)
        run: ${{ inputs.cc_prefix }} make dev
      - name: test (dev)
        run: ${{ inputs.valgrind_prefix }} make check
      - name: build (release)
        run: ${{ inputs.cc_prefix }} make release
      - name: test (release)
        run: ${{ inputs.valgrind_prefix }} make check
      # - name: build with ASan (release)
      #   run: |
      #       export CFLAGS="$CFLAGS -O2 -Wall -Wextra -gdwarf-4 -fsanitize=address -fno-omit-frame-pointer"
      #       ${{ inputs.cc_prefix }} make release
      # - name: test with ASan (release)
      #   run: make check
      - name: build with UBSan (release)
        run: |
            export CFLAGS="$CFLAGS -O2 -Wall -Wextra -gdwarf-4 -fsanitize=undefined -fno-omit-frame-pointer"
            ${{ inputs.cc_prefix }} make release
      - name: test with UBSan (release)
        run: UBSAN_OPTIONS=print_stacktrace=1 make check
